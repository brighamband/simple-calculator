{"ast":null,"code":"import _slicedToArray from \"C:\\\\Coding\\\\simple-calculator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Coding\\\\simple-calculator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Coding\\\\simple-calculator\\\\src\\\\App.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 200px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: xx-large;\\n  width: 100px;\\n  height: 50px;\\n  text-align: center;\\n  margin: 0.5em;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  font-family: sans-serif;\\n  text-align: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nvar AppDiv = styled.div(_templateObject());\nvar BigStyle = css(_templateObject2());\nvar BigInput = styled.input(_templateObject3(), BigStyle);\nvar BigSelect = styled.select(_templateObject4(), BigStyle);\nvar EqualsLine = styled.hr(_templateObject5());\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstOperand = _useState2[0],\n      setFirstOperand = _useState2[1];\n\n  var _useState3 = useState(\"add\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      operator = _useState4[0],\n      setOperator = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      secondOperand = _useState6[0],\n      setSecondOperand = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      answer = _useState8[0],\n      setAnswer = _useState8[1];\n\n  useEffect(function () {\n    var result;\n\n    switch (operator) {\n      case \"add\":\n        result = firstOperand + secondOperand;\n        break;\n\n      case \"subtract\":\n        result = firstOperand - secondOperand;\n        break;\n\n      case \"multiply\":\n        result = firstOperand * secondOperand;\n        break;\n\n      case \"divide\":\n        result = firstOperand / secondOperand;\n        break;\n\n      default:\n        break;\n    }\n\n    result = Math.floor(result * 1000) / 1000;\n\n    if (isNaN(result)) {\n      result = \"...\";\n    }\n\n    setAnswer(result);\n  }, [firstOperand, operator, secondOperand]);\n  return /*#__PURE__*/React.createElement(AppDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Simple Calculator\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BigInput, {\n    type: \"number\",\n    value: firstOperand,\n    onChange: function onChange(e) {\n      return setFirstOperand(parseFloat(e.target.value));\n    },\n    placeholder: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BigSelect, {\n    value: operator,\n    onChange: function onChange(e) {\n      return setOperator(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"subtract\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"\\u2212\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"multiply\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"divide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"\\xF7\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BigInput, {\n    type: \"number\",\n    value: secondOperand,\n    onChange: function onChange(e) {\n      return setSecondOperand(parseFloat(e.target.value));\n    },\n    placeholder: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(EqualsLine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, answer));\n}","map":{"version":3,"sources":["C:/Coding/simple-calculator/src/App.js"],"names":["React","useState","useEffect","styled","css","AppDiv","div","BigStyle","BigInput","input","BigSelect","select","EqualsLine","hr","App","firstOperand","setFirstOperand","operator","setOperator","secondOperand","setSecondOperand","answer","setAnswer","result","Math","floor","isNaN","e","parseFloat","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst AppDiv = styled.div`\r\n  font-family: sans-serif;\r\n  text-align: center;\r\n`;\r\n\r\nconst BigStyle = css`\r\n  font-size: xx-large;\r\n  width: 100px;\r\n  height: 50px;\r\n  text-align: center;\r\n  margin: 0.5em;\r\n`;\r\n\r\nconst BigInput = styled.input`\r\n  ${BigStyle}\r\n`;\r\n\r\nconst BigSelect = styled.select`\r\n  ${BigStyle}\r\n`;\r\n\r\nconst EqualsLine = styled.hr`\r\n  width: 200px;\r\n`;\r\n\r\nexport default function App() {\r\n  const [firstOperand, setFirstOperand] = useState();\r\n  const [operator, setOperator] = useState(\"add\");\r\n  const [secondOperand, setSecondOperand] = useState();\r\n  const [answer, setAnswer] = useState();\r\n\r\n  useEffect(() => {\r\n    let result;\r\n\r\n    switch (operator) {\r\n      case \"add\":\r\n        result = firstOperand + secondOperand;\r\n        break;\r\n      case \"subtract\":\r\n        result = firstOperand - secondOperand;\r\n        break;\r\n      case \"multiply\":\r\n        result = firstOperand * secondOperand;\r\n        break;\r\n      case \"divide\":\r\n        result = firstOperand / secondOperand;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    result = Math.floor(result * 1000) / 1000;\r\n\r\n    if (isNaN(result)) {\r\n      result = \"...\";\r\n    }\r\n\r\n    setAnswer(result);\r\n  }, [firstOperand, operator, secondOperand]);\r\n\r\n  return (\r\n    <AppDiv>\r\n      <h1>Simple Calculator</h1>\r\n      <br />\r\n      <BigInput\r\n        type=\"number\"\r\n        value={firstOperand}\r\n        onChange={(e) => setFirstOperand(parseFloat(e.target.value))}\r\n        placeholder=\"1\"\r\n      />\r\n      <br />\r\n      <BigSelect value={operator} onChange={(e) => setOperator(e.target.value)}>\r\n        <option value=\"add\">+</option>\r\n        <option value=\"subtract\">−</option>\r\n        <option value=\"multiply\">×</option>\r\n        <option value=\"divide\">÷</option>\r\n      </BigSelect>\r\n      <br />\r\n      <BigInput\r\n        type=\"number\"\r\n        value={secondOperand}\r\n        onChange={(e) => setSecondOperand(parseFloat(e.target.value))}\r\n        placeholder=\"2\"\r\n      />\r\n      <br />\r\n      <EqualsLine />\r\n      <h1>{answer}</h1>\r\n    </AppDiv>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}